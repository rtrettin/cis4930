Remi Trettin
CIS4930
HW 4

Fought The Law
FLAG: flag{CR1M3DOE5N7P4Y}
Solution: To solve this problem I first noticed the file was a sound file. Checking the output of the "file" command verified my assumption. I listened to the file first and heard the distinct morse code. I opened the file in Audacity to see the morse code sound pattern. I translated the pattern into the following:

-.-. .-. .---- -- ...-- -.. --- . ..... -. --... .--. ....- -.--

I used an online tool to decode this morse code and retrieve the flag.

RTFPPTX
FLAG: flag{ReadingRainbow}
Solution: I thought the flag had something to do with the base64 encoded string on the first slide in the powerpoint. If this is decoded it gives the following hex string:

MHgwNjB4MEEweDBEMHgxNjB4MTgweDIyMHgyODB4MkYweDMyMHgzNjB4MzkweDNFMHg0MTB4NDQ=
0x06 0x0A 0x0D 0x16 0x18 0x22 0x28 0x2F 0x32 0x36 0x39 0x3E 0x41 0x44

I first tried using this literally by converting the hex to ASCII but the result was garbage. Then I tried doing XOR on this hex string with the hex of the PPTX file signature. This did not work either. I noticed the problem say something about reading the lecture notes and noticed characters in the slides that were bold and underlined for some reason. I converted the original hex string to decimal and tried matching those numbers to slide numbers. Each slide had a bold/underline character so I concatenated those together to get the flag.

0x06 0x0A 0x0D 0x16 0x18 0x22 0x28 0x2F 0x32 0x36 0x39 0x3E 0x41 0x44
R    e    a    d    i    n    g    R    a    i    n    b    o    w

BrokenFlag
FLAG: flag{n0th1n_115_45_11t_533m5}
Solution: I assumed BrokenFlag.txt was not actually a text file so I ran "file" on it to confirm that.

BrokenFlag.txt: gzip compressed data, last modified: Mon Jan 15 19:18:37 2018, from Unix

To uncompress the BrokenFlag file I ran the following since it was gzip compressed:

tar zxvf BrokenFlag.txt

This gave me two files: exact_copy01 and exact_copy02. I ran "file" again on both of these and found out they were bzip2 compressed. I tried to uncompress each of them with:

bzip2 -d exact_copy02

This worked on exact_copy02 and produced the junk2 file. A simple decompression did not work on exact_copy01. I used xxd on junk2 and noticed the beginning of the flag. I was obviously still missing the end portion though. I used vbindiff to see the differences between exact_copy01 and exact_copy02.

[hw4-vbindiff.png]

Since I could not extract anything using bzip2 from exact_copy01 I tried to use bzip2recover but the file was too small to recover anything from since the block size used for compression was 900KB. Then I decided to extract the hex from exact_copy01 that was different. I converted this hex directly to ASCII and it looked like part of a flag due to the underscores and leetspeak.

5F 31 31 35 5F 34 35 5F 31 31 74 5F
_115_45_11t_

However it looked like there was at least one more part of the flag I was missing. I was running out of places to search so I went back to BrokenFlag.txt. I used xxd on that file and saw the last piece of the flag towards the end. I joined all three pieces together to get the final flag.

Cyberdog Ate The Cyberhomework
FLAG: flag{gooddoggie}
Solution: I opened the provided image file in FTK Imager which is a free forensic tool to examine images.

[hw4-ftk.png]

I figured out the image file had a FAT file system but it was easy to navigate because only one file existed. I found Flag.docx in the trash folder. FTK Imager allowed me to extract that single file from the image. I ran "file" on it to be sure it was actually a docx. After verifying it was I just tried opening it but no flag was found. I extracted the raw files from the docx format and grabbed image1.jpg from the Flag/word/media directory. I changed image1.jpg to image1.png because of the file signature but that probably didn't matter. I viewed the image in xxd and didn't notice anything obvious. Finally I opened it and saw the QR code. I used an online tool to decode this and got base64. I decoded that base64 string to get the hashed flag. Lastly I used the CrackStation website to crack the MD5 hash and get the final flag.

ZmxhZ3s5ZWJkNDcxODM0N2UzODlhYWEyYTMyNDE2MjRhZmIxNX0=
flag{9ebd4718347e389aaa2a3241624afb15}
